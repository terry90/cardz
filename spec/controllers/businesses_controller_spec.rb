require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BusinessesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Business. As you add validations to Business, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BusinessesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'does something' do
      skip
    end
  end

  describe 'GET #show' do
    it 'does something too' do
      skip
    end
  end

  describe 'GET #new' do
    it 'does something' do
      skip
    end
  end

  describe 'GET #edit' do
    it 'does something' do
      skip
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Business' do
        skip
        # expect {
        #           post :create, params: {business: valid_attributes}, session: valid_session
        #         }.to change(Business, :count).by(1)
      end

      it 'assigns a newly created business as @business' do
        skip
        #       post :create, params: {business: valid_attributes}, session: valid_session
        #       expect(assigns(:business)).to be_a(Business)
        # expect(assigns(:business)).to be_persisted
      end

      it 'redirects to the created business' do
        skip
              # post :create, params: {business: valid_attributes}, session: valid_session
              # expect(response).to redirect_to(Business.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved business as @business' do
        skip
              # post :create, params: {business: invalid_attributes}, session: valid_session
              # expect(assigns(:business)).to be_a_new(Business)
      end

      it "re-renders the 'new' template" do
        skip
              # post :create, params: {business: invalid_attributes}, session: valid_session
              # expect(response).to render_template('new')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip('Add a hash of attributes valid for your model')
      }

      it 'updates the requested business' do
        business = Business.create! valid_attributes
              put :update, params: {id: business.to_param, business: new_attributes}, session: valid_session
              business.reload
        skip('Add assertions for updated state')
      end

      it 'assigns the requested business as @business' do
        business = Business.create! valid_attributes
              put :update, params: {id: business.to_param, business: valid_attributes}, session: valid_session
              expect(assigns(:business)).to eq(business)
      end

      it 'redirects to the business' do
        business = Business.create! valid_attributes
              put :update, params: {id: business.to_param, business: valid_attributes}, session: valid_session
              expect(response).to redirect_to(business)
      end
    end

    context 'with invalid params' do
      it 'assigns the business as @business' do
        business = Business.create! valid_attributes
              put :update, params: {id: business.to_param, business: invalid_attributes}, session: valid_session
              expect(assigns(:business)).to eq(business)
      end

      it "re-renders the 'edit' template" do
        business = Business.create! valid_attributes
              put :update, params: {id: business.to_param, business: invalid_attributes}, session: valid_session
              expect(response).to render_template("edit")
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested business' do
      skip
      # business = Business.create! valid_attributes
      # expect {
      #         delete :destroy, params: {id: business.to_param}, session: valid_session
      #       }.to change(Business, :count).by(-1)
    end

    it 'redirects to the businesses list' do
      skip
      # business = Business.create! valid_attributes
      #     delete :destroy, params: {id: business.to_param}, session: valid_session
      #     expect(response).to redirect_to(businesses_url)
    end
  end

end
